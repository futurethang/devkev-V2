"var Component=(()=>{var p=Object.create;var o=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var y=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),v=(t,e)=>{for(var i in e)o(t,i,{get:e[i],enumerable:!0})},s=(t,e,i,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of m(e))!f.call(t,r)&&r!==i&&o(t,r,{get:()=>e[r],enumerable:!(a=u(e,r))||a.enumerable});return t};var b=(t,e,i)=>(i=t!=null?p(g(t)):{},s(e||!t||!t.__esModule?o(i,\"default\",{value:t,enumerable:!0}):i,t)),w=t=>s(o({},\"__esModule\",{value:!0}),t);var l=y((T,c)=>{c.exports=_jsx_runtime});var x={};v(x,{default:()=>h});var n=b(l());function d(t){let e={code:\"code\",em:\"em\",h1:\"h1\",h2:\"h2\",h3:\"h3\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",strong:\"strong\",ul:\"ul\",...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{children:\"Prompt Engineering Patterns: Common Patterns for Effective AI Collaboration\"}),`\n`,(0,n.jsx)(e.p,{children:\"Just as design patterns revolutionized software architecture, prompt engineering patterns are transforming how we collaborate with AI. These proven patterns can mean the difference between frustrating AI interactions and seamless, productive partnerships.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"The Foundation: Understanding AI Communication\"}),`\n`,(0,n.jsx)(e.p,{children:\"Before diving into patterns, it's crucial to understand that AI communication isn't just about writing clear instructions\\u2014it's about establishing context, setting expectations, and creating a collaborative dialogue.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Think of it as pair programming with an incredibly knowledgeable partner who needs explicit context to be effective.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Core Prompt Engineering Patterns\"}),`\n`,(0,n.jsx)(e.h3,{children:\"1. The Context-Action-Format (CAF) Pattern\"}),`\n`,(0,n.jsx)(e.p,{children:\"This is your bread and butter for most development tasks.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`**Context**: I'm building a React e-commerce app with TypeScript and Tailwind CSS\n**Action**: Create a product card component that displays price, image, and rating\n**Format**: Provide the component code with TypeScript interfaces and Tailwind classes\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Why it works\"}),\": AI needs context to make appropriate decisions about technology choices, patterns, and conventions.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"2. The Chain-of-Thought Pattern\"}),`\n`,(0,n.jsx)(e.p,{children:\"Perfect for complex problem-solving and debugging.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`I need to optimize this slow database query. Let me walk through this step by step:\n\n1. First, analyze what the query is doing\n2. Identify potential bottlenecks\n3. Suggest specific optimizations\n4. Explain the trade-offs of each approach\n\nHere's the query: [your SQL query here]\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Why it works\"}),\": Encourages systematic thinking and provides insight into the AI's reasoning process.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"3. The Role-Playing Pattern\"}),`\n`,(0,n.jsx)(e.p,{children:\"Leverage AI's ability to adopt specific perspectives and expertise.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`Act as a senior DevOps engineer reviewing my Docker configuration.\nFocus on security, performance, and best practices.\nPoint out any potential issues and suggest improvements.\n\n[Docker configuration here]\n`})}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"Variations:\"})}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:'\"Act as a security expert...\"'}),`\n`,(0,n.jsx)(e.li,{children:'\"Review this as a senior frontend architect...\"'}),`\n`,(0,n.jsx)(e.li,{children:'\"Evaluate this API design as a product manager...\"'}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"4. The Example-Driven Pattern\"}),`\n`,(0,n.jsx)(e.p,{children:\"Show, don't just tell\\u2014especially powerful for maintaining consistency.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`I need to create similar API endpoints for different resources. Here's my existing pattern:\n\n[Example endpoint code]\n\nNow create endpoints for the User resource following the same pattern, including:\n- GET /users (with pagination)\n- GET /users/:id\n- POST /users\n- PUT /users/:id\n- DELETE /users/:id\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"5. The Constraint Pattern\"}),`\n`,(0,n.jsx)(e.p,{children:\"Set clear boundaries to get focused results.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`Create a utility function with these constraints:\n- Must be pure (no side effects)\n- Maximum 20 lines of code\n- Only use native JavaScript (no external dependencies)\n- Must handle edge cases for null/undefined inputs\n- Include JSDoc comments\n\nFunction purpose: Deep merge two objects\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"6. The Iterative Refinement Pattern\"}),`\n`,(0,n.jsx)(e.p,{children:\"Perfect for complex features or when you're not sure exactly what you want.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`Let's build this feature iteratively:\n\n**Iteration 1**: Basic functionality only\n**Requirements**: User can create a simple todo item\n\nOnce that's working, I'll ask for iteration 2 with additional features.\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Advanced Patterns for Specific Scenarios\"}),`\n`,(0,n.jsx)(e.h3,{children:\"The Documentation-First Pattern\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`Before writing any code, create comprehensive documentation for this feature:\n- Purpose and user stories\n- API specification\n- Data models\n- Integration points\n- Testing strategy\n\nFeature: Real-time chat system for our app\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"The Test-Driven Development Pattern\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`Create comprehensive tests first, then implement the code to make them pass.\n\nRequirements for the UserService class:\n- Validate email formats\n- Hash passwords before storing\n- Prevent duplicate email registration\n- Handle database connection errors gracefully\n\nStart with the test suite.\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"The Migration Pattern\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`I need to migrate this legacy PHP code to Node.js:\n\n1. First, analyze the existing code and explain its functionality\n2. Identify potential issues in the migration\n3. Create the equivalent Node.js implementation\n4. Highlight any behavioral differences\n\n[Legacy PHP code here]\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Pattern Combinations\"}),`\n`,(0,n.jsx)(e.p,{children:\"The real power comes from combining patterns:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`**Role**: Act as a senior full-stack developer\n**Context**: Building a scalable SaaS application\n**Task**: Review this authentication system\n**Approach**: Use chain-of-thought to analyze security, scalability, and maintainability\n**Constraints**: Focus on production-ready solutions only\n**Format**: Provide specific code improvements with explanations\n\n[Authentication code here]\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Anti-Patterns to Avoid\"}),`\n`,(0,n.jsx)(e.h3,{children:\"The Vague Request\"}),`\n`,(0,n.jsx)(e.p,{children:`\\u274C \"Make this code better\"\n\\u2705 \"Optimize this code for performance, focusing on reducing database queries\"`}),`\n`,(0,n.jsx)(e.h3,{children:\"The Missing Context\"}),`\n`,(0,n.jsx)(e.p,{children:`\\u274C \"Create a login form\"\n\\u2705 \"Create a login form for a React app using Formik, Yup validation, and our existing design system\"`}),`\n`,(0,n.jsx)(e.h3,{children:\"The Single-Shot Expectation\"}),`\n`,(0,n.jsx)(e.p,{children:`\\u274C Expecting perfect results on the first try\n\\u2705 Treating it as an iterative conversation`}),`\n`,(0,n.jsx)(e.h2,{children:\"Building Your Pattern Library\"}),`\n`,(0,n.jsx)(e.p,{children:\"As you work with AI, develop your own pattern library:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Document successful prompts\"}),\" that gave you great results\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Create templates\"}),\" for common tasks in your domain\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Share patterns\"}),\" with your team for consistency\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Iterate and improve\"}),\" based on outcomes\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"The Meta-Pattern: Continuous Learning\"}),`\n`,(0,n.jsx)(e.p,{children:\"The most important pattern is treating every AI interaction as a learning opportunity:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`After you complete this task, also:\n1. Explain any interesting decisions you made\n2. Suggest alternative approaches I should consider\n3. Point out any assumptions you had to make\n4. Recommend related concepts I should learn\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Conclusion\"}),`\n`,(0,n.jsx)(e.p,{children:\"Effective prompt engineering isn't about finding the perfect prompt\\u2014it's about building a systematic approach to AI collaboration. These patterns provide a foundation, but the real skill comes from adapting them to your specific context and needs.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Remember: AI is your thinking partner, not your replacement. The better you communicate, the more powerful your collaboration becomes.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.em,{children:\"Which patterns have you found most effective in your AI-assisted development? Share your experiences and let's build better patterns together.\"})})]})}function h(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(d,{...t})}):d(t)}return w(x);})();\n;return Component;"