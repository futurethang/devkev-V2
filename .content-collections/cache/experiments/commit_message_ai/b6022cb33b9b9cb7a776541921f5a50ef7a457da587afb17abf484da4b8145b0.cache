"var Component=(()=>{var g=Object.create;var o=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var y=(i,n)=>()=>(n||i((n={exports:{}}).exports,n),n.exports),x=(i,n)=>{for(var t in n)o(i,t,{get:n[t],enumerable:!0})},l=(i,n,t,c)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let r of u(n))!f.call(i,r)&&r!==t&&o(i,r,{get:()=>n[r],enumerable:!(c=m(n,r))||c.enumerable});return i};var C=(i,n,t)=>(t=i!=null?g(p(i)):{},l(n||!i||!i.__esModule?o(t,\"default\",{value:i,enumerable:!0}):t,i)),w=i=>l(o({},\"__esModule\",{value:!0}),i);var a=y((B,s)=>{s.exports=_jsx_runtime});var b={};x(b,{default:()=>h});var e=C(a());function d(i){let n={code:\"code\",h1:\"h1\",h2:\"h2\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",strong:\"strong\",ul:\"ul\",...i.components};return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.h1,{children:\"Commit Message AI\"}),`\n`,(0,e.jsx)(n.p,{children:\"Generate meaningful, standardized git commit messages by analyzing your code changes with AI.\"}),`\n`,(0,e.jsx)(n.h2,{children:\"Features\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Diff Analysis\"}),\": Examines actual code changes to understand intent\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Conventional Commits\"}),\": Follows conventional commit specification\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Scope Detection\"}),\": Automatically identifies affected modules/components\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Breaking Changes\"}),\": Detects and flags breaking changes\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Multiple Options\"}),\": Generates several commit message variations\"]}),`\n`]}),`\n`,(0,e.jsx)(n.h2,{children:\"Conventional Commit Format\"}),`\n`,(0,e.jsx)(n.p,{children:\"Generated messages follow the standard:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{children:`<type>(<scope>): <description>\n\n[optional body]\n\n[optional footer(s)]\n`})}),`\n`,(0,e.jsx)(n.h2,{children:\"Supported Types\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"feat\"}),\": New features\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"fix\"}),\": Bug fixes\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"docs\"}),\": Documentation changes\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"style\"}),\": Code style changes\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"refactor\"}),\": Code refactoring\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"test\"}),\": Test additions/modifications\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"chore\"}),\": Build process or auxiliary tool changes\"]}),`\n`]}),`\n`,(0,e.jsx)(n.h2,{children:\"Example Analysis\"}),`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.strong,{children:\"Git Diff\"}),\":\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-diff\",children:`diff --git a/src/components/Button.tsx b/src/components/Button.tsx\nindex 1234567..abcdefg 100644\n--- a/src/components/Button.tsx\n+++ b/src/components/Button.tsx\n@@ -1,8 +1,12 @@\n export interface ButtonProps {\n   children: React.ReactNode;\n+  variant?: 'primary' | 'secondary';\n+  size?: 'sm' | 'md' | 'lg';\n }\n\n-export function Button({ children }: ButtonProps) {\n-  return <button className=\"btn\">{children}</button>\n+export function Button({ children, variant = 'primary', size = 'md' }: ButtonProps) {\n+  const classes = \\`btn btn-\\${variant} btn-\\${size}\\`;\n+  return <button className={classes}>{children}</button>\n }\n`})}),`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.strong,{children:\"Generated Messages\"}),\":\"]}),`\n`,(0,e.jsxs)(n.ol,{children:[`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.code,{children:\"feat(components): add variant and size props to Button component\"})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.code,{children:\"feat(ui): enhance Button with variant and size styling options\"})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.code,{children:\"feat(button): add customizable variant and size properties\"})}),`\n`]}),`\n`,(0,e.jsx)(n.h2,{children:\"Advanced Features\"}),`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.strong,{children:\"Breaking Change Detection\"}),\":\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{children:`feat(api)!: change user authentication endpoint structure\n\nBREAKING CHANGE: The /auth endpoint now requires email instead of username\n`})}),`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.strong,{children:\"Multi-scope Changes\"}),\":\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{children:`feat(auth,ui): implement OAuth login with new button styles\n`})}),`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.strong,{children:\"Issue Linking\"}),\":\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{children:`fix(validation): resolve email regex pattern bug\n\nFixes #123\n`})}),`\n`,(0,e.jsx)(n.h2,{children:\"Integration Options\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"CLI Tool\"}),\": \",(0,e.jsx)(n.code,{children:\"npx commit-ai\"}),\" in any git repository\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Git Hook\"}),\": Automatic message generation on commit\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"VS Code Extension\"}),\": Generate messages from diff view\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"GitHub Action\"}),\": PR title and description generation\"]}),`\n`]}),`\n`,(0,e.jsx)(n.h2,{children:\"Tech Stack\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:\"Node.js CLI with git integration\"}),`\n`,(0,e.jsx)(n.li,{children:\"OpenAI API for change analysis\"}),`\n`,(0,e.jsx)(n.li,{children:\"Simple-git for repository operations\"}),`\n`,(0,e.jsx)(n.li,{children:\"Conventional commits parser\"}),`\n`]}),`\n`,(0,e.jsx)(n.h2,{children:\"Configuration\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Customize generation with \",(0,e.jsx)(n.code,{children:\".commitai.json\"}),\":\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-json\",children:`{\n  \"maxLength\": 72,\n  \"types\": [\"feat\", \"fix\", \"docs\"],\n  \"scopes\": [\"auth\", \"ui\", \"api\"],\n  \"includeBody\": true,\n  \"linkIssues\": true\n}\n`})}),`\n`,(0,e.jsx)(n.h2,{children:\"Use Cases\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:\"Maintaining consistent commit history\"}),`\n`,(0,e.jsx)(n.li,{children:\"Automating commit message writing\"}),`\n`,(0,e.jsx)(n.li,{children:\"Learning conventional commit standards\"}),`\n`,(0,e.jsx)(n.li,{children:\"Code review and change tracking\"}),`\n`]}),`\n`,(0,e.jsx)(n.h2,{children:\"Benefits\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Consistency\"}),\": Standardized message format across team\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Accuracy\"}),\": Messages reflect actual code changes\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Speed\"}),\": Faster commit workflow\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Quality\"}),\": Better commit history for project maintenance\"]}),`\n`]}),`\n`,(0,e.jsx)(n.p,{children:\"Perfect for developers and teams who want professional commit messages without the manual effort of writing them.\"})]})}function h(i={}){let{wrapper:n}=i.components||{};return n?(0,e.jsx)(n,{...i,children:(0,e.jsx)(d,{...i})}):d(i)}return w(b);})();\n;return Component;"